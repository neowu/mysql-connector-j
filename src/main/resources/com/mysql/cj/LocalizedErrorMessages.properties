# Copyright (c) 2007, 2024, Oracle and/or its affiliates.
#
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License, version 2.0, as published by
# the Free Software Foundation.
#
# This program is designed to work with certain software that is licensed under separate terms, as designated in a particular file or component or in
# included license documentation. The authors of MySQL hereby grant you an additional permission to link the program and your derivative works with the
# separately licensed software that they have either included with the program or referenced in the documentation.
#
# Without limiting anything contained in the foregoing, this file, which is part of MySQL Connector/J, is also subject to the Universal FOSS Exception,
# version 1.0, a copy of which can be found at http://oss.oracle.com/licenses/universal-foss-exception.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0, for more details.
#
# You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

#
# Common
#
Common.UnableToUnwrap=Unable to unwrap to {0}
#
# Classes
#
AuthenticationProvider.BadDefaultAuthenticationPlugin=Improper value "{0}" for property ''defaultAuthenticationPlugin''.
AuthenticationProvider.DefaultAuthenticationPluginIsNotListed=Default authentication plugin "{0}" is neither one of the built-in plugins nor one of the plugins listed in ''authenticationPlugins''.
AuthenticationProvider.BadDisabledAuthenticationPlugin=Can''t disable the default authentication plugin. Either remove "{0}" from the disabled authentication plugins list, or choose a different default authentication plugin.
AuthenticationProvider.AuthenticationPluginRequiresSSL=SSL connection required for plugin "{0}". Check if ''sslMode'' is enabled.
AuthenticationProvider.UnexpectedAuthenticationApproval=Unexpected authentication approval. Authentication plugin "{0}" did not report "done" state but server has approved the connection.

Buffer.0=Payload length can not be larger than buffer size.
Buffer.1=Buffer length is less than expected payload length.

Connection.0=Unable to connect to database.
Connection.1=Cannot connect to MySQL server on {0}:{1}.\n\nMake sure that there is a MySQL server running on the machine/port you are trying to connect to and that the machine this software is running on is able to connect to this host/port (i.e. not firewalled). Also make sure that the server has not been started with the --skip-networking flag.\n\n
Connection.2=No operations allowed after connection closed.
Connection.3=Can''t call commit when autocommit=true
Connection.4=Communications link failure during commit(). Transaction resolution unknown.
Connection.5=Unknown Java encoding for the character set with index ''{0}''. Use the ''customCharsetMapping'' property to force it.
Connection.6=Unknown character set index ''{0}'' received from server. The appropriate client character set can be forced via the ''characterEncoding'' property.

Connection.20=Can''t call rollback when autocommit=true
Connection.21=Communications link failure during rollback(). Transaction resolution unknown.

Connection.24=Transaction isolation level NONE not supported by MySQL
Connection.25=Unsupported transaction isolation level ''{0}''

Connection.UnableToConnect=Could not create connection to database server.

Connection.LoginTimeout=Connection attempt exceeded defined timeout.

ConnectionProperties.dynamicChangeIsNotAllowed=Dynamic change of ''{0}'' is not allowed.

ConnectionString.0=The database URL cannot be null.
ConnectionString.1=Malformed database URL, failed to parse the main URL sections.
ConnectionString.2=Malformed database URL, failed to parse the URL authority segment ''{0}''.
ConnectionString.3=Failed to parse the host:port pair ''{0}''.
ConnectionString.4=Malformed database URL, failed to parse the connection string near ''{0}''.
ConnectionString.7=Malformed database URL, failed to parse the port ''{0}'' as a number.

ConnectionString.17=Connector/J cannot handle a connection string ''{0}''.

EscapeProcessor.0=Not a valid escape sequence: {0}
EscapeProcessor.1=Syntax error for DATE escape sequence ''{0}''
EscapeProcessor.2=Syntax error for TIMESTAMP escape sequence ''{0}''.
EscapeProcessor.3=Syntax error for escape sequence ''{0}''
EscapeProcessor.4=Syntax error while processing '{'fn convert (... , ...)'}' token, missing opening parenthesis in token ''{0}''.
EscapeProcessor.5=Syntax error while processing '{'fn convert (... , ...)'}' token, missing comma in token ''{0}''.
EscapeProcessor.6=Syntax error while processing '{'fn convert (... , ...)'}' token, missing closing parenthesis in token ''{0}''.
EscapeProcessor.7=Unsupported conversion type ''{0}'' found while processing escape token.

MysqlIO.15=SSL Connection required, but not provided by server.
MysqlIO.25=\ ... (truncated)
MysqlIO.105=Negative skip length not allowed
MysqlIO.EOF=Can not read response from server. Expected to read {0} bytes, read {1} bytes before connection was unexpectedly lost.
MysqlIO.LoadDataLocalNotAllowed=Server asked for stream in response to "LOAD DATA LOCAL INFILE" but functionality is not enabled at client by setting "allowLoadLocalInfile=true" or specifying a path with ''allowLoadLocalInfileInPath''.

MysqlParameterMetadata.0=Parameter metadata not available for the given statement
MysqlParameterMetadata.1=Parameter index of ''{0}'' is invalid.
MysqlParameterMetadata.2=Parameter index of ''{0}'' is greater than number of parameters, which is ''{1}''.

NativeCapabilites.001=Unsupported protocol version: {0}. Likely connecting to an X Protocol port.

NonRegisteringDriver.3=Hostname of MySQL Server
NonRegisteringDriver.7=Port number of MySQL Server
NonRegisteringDriver.10=Database name;
NonRegisteringDriver.13=Username to authenticate as
NonRegisteringDriver.16=Password to use for authentication
NonRegisteringDriver.17=Cannot load connection class because of underlying exception: {0}

OperationNotSupportedException.0=Operation not supported.

PacketReader.1=Short read from server, expected {0} bytes, received only {1}
PacketReader.10=Packets received out of order

PreparedQuery.0=SQL String cannot be NULL
PreparedQuery.1=SQL String cannot be empty

PreparedStatement.0=SQL String cannot be NULL
PreparedStatement.1=SQL String cannot be NULL
PreparedStatement.2=Parameter index out of range (
PreparedStatement.17=Cannot convert 
PreparedStatement.18=\ to SQL type requested due to 
PreparedStatement.19=\ - 
PreparedStatement.20=Connection is read-only. 
PreparedStatement.21=Queries leading to data modification are not allowed
PreparedStatement.25=Connection is read-only. 
PreparedStatement.26=Queries leading to data modification are not allowed
PreparedStatement.34=Connection is read-only. 
PreparedStatement.35=Queries leading to data modification are not allowed
PreparedStatement.37=Can not issue executeUpdate() or executeLargeUpdate() with statements that produce result sets
PreparedStatement.40=No value specified for parameter 
PreparedStatement.49=Parameter index out of range (
PreparedStatement.50=\ < 1 ).
PreparedStatement.51=Parameter index out of range (
PreparedStatement.52=\ > number of parameters, which is 
PreparedStatement.53=).
PreparedStatement.63=Can''t set IN parameter for return value of stored function call.
PreparedStatement.64=''{0}'' is not a valid numeric or approximate numeric value
PreparedStatement.65=Can''t set scale of ''{0}'' for DECIMAL argument ''{1}''
PreparedStatement.66=No conversion from {0} to Types.BOOLEAN possible.
PreparedStatement.67=Conversion from {0} to {1} is not supported.

Protocol.0=\ message from server: "
Protocol.2=\ ... (truncated)

QueryInfo.NullSql=SQL String cannot be NULL

RemoveStatement.0=Parameter ''{0}'' must not be null or empty.

ResultSet.Retrieved__1=Retrieved 
ResultSet.Bad_format_for_BigDecimal=Bad format for BigDecimal ''{0}'' in column {1}.
ResultSet.Bad_format_for_BigInteger=Bad format for BigInteger ''{0}'' in column {1}.
ResultSet.Column_Index_out_of_range_low=Column Index out of range, {0} < 1.
ResultSet.Column_Index_out_of_range_high=Column Index out of range, {0} > {1}.
ResultSet.Positioned_Update_not_supported=Positioned Update not supported.
ResultSet.Illegal_operation_on_empty_result_set=Illegal operation on empty result set.

ResultSet.Query_generated_no_fields_for_ResultSet_57=Query generated no fields for ResultSet
ResultSet.Illegal_value_for_fetch_direction_64=Illegal value for fetch direction
ResultSet.Unacceptable_value_for_fetch_direction=Fetch direction {0} cannot be set on a ResultSet of type ResultSet.TYPE_FORWARD_ONLY
ResultSet.Value_must_be_between_0_and_getMaxRows()_66=Value must be between 0 and getMaxRows()
ResultSet.Query_generated_no_fields_for_ResultSet_99=Query generated no fields for ResultSet
ResultSet.Operation_not_allowed_after_ResultSet_closed_144=Operation not allowed after ResultSet closed
ResultSet.Before_start_of_result_set_146=Before start of result set
ResultSet.After_end_of_result_set_148=After end of result set
ResultSet.Query_generated_no_fields_for_ResultSet_133=Query generated no fields for ResultSet
ResultSet.ResultSet_is_from_UPDATE._No_Data_115=Not a navigable ResultSet.

ResultSet.Column____112=Column ''
ResultSet.___not_found._113='' not found.

ResultSet.InvalidLengthForType=Invalid length ({0}) for type {1}
ResultSet.InvalidFormatForType=Invalid format for type {0}. Value ''{1}''
ResultSet.NumberOutOfRange=Value ''{0}'' is outside of valid range for type {1}
ResultSet.UnsupportedConversion=Unsupported conversion from {0} to {1}
ResultSet.PrecisionLostWarning=Precision lost converting DATETIME/TIMESTAMP to {0}
ResultSet.UnableToInterpretString=Cannot determine value type from string ''{0}''
ResultSet.UnableToConvertString=Cannot convert string ''{0}'' to {1} value
ResultSet.UnknownSourceType=Cannot decode value of unknown source type
ResultSet.InvalidTimeValue=The value ''{0}'' is an invalid TIME value. JDBC Time objects represent a wall-clock time and not a duration as MySQL treats them. If you are treating this type as a duration, consider retrieving this value as a string and dealing with it according to your requirements.
ResultSet.InvalidZeroDate=Zero date value prohibited

#
# Usage advisor messages for ResultSets
#
ResultSetMetaData.46=Column index out of range.

ResultSet.1=Can''t convert empty string ('''') to numeric
ResultSet.2=Required type conversion not allowed

ResultSet.ForwardOnly=Operation not allowed for a result set of type ResultSet.TYPE_FORWARD_ONLY.

Sha256PasswordPlugin.0=Unable to read public key {0}
Sha256PasswordPlugin.1=Unable to close public key file
Sha256PasswordPlugin.2=Public Key Retrieval is not allowed

SocketConnection.0=No name specified for socket factory.
SocketConnection.1=Socket is closed.

Statement.0=Connection is closed.
Statement.2=Unsupported character encoding ''{0}''
Statement.5=Illegal value for setFetchDirection().
Statement.7=Illegal value for setFetchSize().
Statement.11=Illegal value for setMaxFieldSize().
Statement.13=Can not set max field size > max allowed packet of {0} bytes.
Statement.15=setMaxRows() out of range. 
Statement.19=Illegal flag for getMoreResults(int).
Statement.21=Illegal value for setQueryTimeout().
Statement.AlreadyClosed=No operations allowed after statement closed.
Statement.57=Statement.executeQuery() cannot issue statements that do not produce result sets.
Statement.59=Can not issue NULL query.
Statement.61=Can not issue empty query.
Statement.63=Statement not closed explicitly. You should call close() on created Statement instances from your code to be more efficient.
Statement.65=Operation not supported.
Statement.GeneratedKeysNotRequested=Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
Statement.ConnectionKilledDueToTimeout=Connection closed to due to statement timeout being reached and "queryTimeoutKillsConnection" being set to "true".
Statement.UnsupportedSQLType=Unsupported SQL type: 

StringInspector.1=The source string must not be null.
StringInspector.2=Illegal argument value {0} for openingMarkers and/or {1} for closingMarkers. These cannot be null and must have the same length.
StringInspector.3=Illegal argument value {0} for overridingMarkers. These cannot be null and must be a sub-set of openingMarkers {1}.
StringInspector.4=The start position must be zero or a positive number.
StringInspector.5=The start position must must not be higher than the stop position.
StringInspector.6=The stop position must be zero or a positive number.
StringInspector.7=The stop position must must not be higher than the length of the source string.
StringInspector.8=The delimiter string must not be null.

StringUtils.0=Unsupported character encoding ''{0}''
StringUtils.badIntFormat=Invalid integer format for value ''{0}''

TimeUtil.0=Illegal hour value ''{0}'' for java.sql.Time type in value ''{1}''.
TimeUtil.1=Illegal minute value ''{0}'' for java.sql.Time type in value ''{1}''.
TimeUtil.2=Illegal second value ''{0}'' for java.sql.Time type in value ''{1}''.
TimeUtil.UnrecognizedTimeZoneId=The server time zone value ''{0}'' is unrecognized or represents more than one time zone. You must \
configure either the server or JDBC driver (via the ''connectionTimeZone'' configuration property) to use a \
more specific time zone value if you want to utilize time zone support.
TimeUtil.LoadTimeZoneMappingError=Failed to load the time zone mapping resource file ''TimeZoneMapping.properties''.

Util.1=\n\n** BEGIN NESTED EXCEPTION ** \n\n
Util.2=\nMESSAGE: 
Util.3=\n\nSTACKTRACE:\n\n
Util.4=\n\n** END NESTED EXCEPTION **\n\n
Util.FailCreateInstance=Failed creating an instance of ''{0}''.

#
# Exceptions
#

AssertionFailedException.0=ASSERTION FAILED: Exception 
AssertionFailedException.1=\ that should not be thrown, was thrown
AssertionFailedException.2=ASSERTION FAILED: {0}

CommunicationsException.2=\ is longer than the server configured value of 
CommunicationsException.3=''wait_timeout''
CommunicationsException.5=may or may not be greater than the server-side timeout 
CommunicationsException.6=(the driver was unable to determine the value of either the 
CommunicationsException.7=''wait_timeout'' or ''interactive_timeout'' configuration values from 
CommunicationsException.8=the server.
CommunicationsException.11=. You should consider either expiring and/or testing connection validity 
CommunicationsException.12=before use in your application, increasing the server configured values for client timeouts, 
CommunicationsException.13=or using the Connector/J connection property ''autoReconnect=true'' to avoid this problem.
CommunicationsException.TooManyClientConnections=The driver was unable to create a connection due to an inability to establish the client portion of a socket.\n\nThis is usually caused by a limit on the number of sockets imposed by the operating system. This limit is usually configurable. \n\nFor Unix-based platforms, see the manual page for the ''ulimit'' command. Kernel or system reconfiguration may also be required.\n\nFor Windows-based platforms, see Microsoft Knowledge Base Article 196271 (Q196271).
CommunicationsException.LocalSocketAddressNotAvailable=The configuration parameter \"localSocketAddress\" has been set to a network interface not available for use by the JVM.
CommunicationsException.20=Communications link failure
CommunicationsException.ServerPacketTimingInfoNoRecv=The last packet sent successfully to the server was {0} milliseconds ago. The driver has not received any packets from the server.
CommunicationsException.ServerPacketTimingInfo=The last packet successfully received from the server was {0} milliseconds ago. The last packet sent successfully to the server was {1} milliseconds ago.
CommunicationsException.TooManyAuthenticationPluginNegotiations=Too many authentication plugin negotiations.

ConnectionFeatureNotAvailableException.0=Feature not available in this distribution of Connector/J

MySQLStatementCancelledException.0=Statement cancelled due to client request

MySQLTimeoutException.0=Statement cancelled due to timeout or client request

NotUpdatable.0=Result Set not updatable.
NotUpdatable.1=This result set must come from a statement that was created with a result set type of ResultSet.CONCUR_UPDATABLE, the query must select only one table, can not use functions and must select all primary keys from that table. See the JDBC 2.1 API Specification, section 5.6 for more details.

PacketTooBigException.0=Packet for query is too large ({0} > {1}). You can change this value on the server by setting the ''max_allowed_packet'' variable.

SQLError.35=Disconnect error
SQLError.36=Data truncated
SQLError.37=Privilege not revoked
SQLError.38=Invalid connection string attribute
SQLError.39=Error in row
SQLError.40=No rows updated or deleted
SQLError.41=More than one row updated or deleted
SQLError.42=Wrong number of parameters
SQLError.43=Unable to connect to data source
SQLError.44=Connection in use
SQLError.45=Connection not open
SQLError.46=Data source rejected establishment of connection
SQLError.47=Connection failure during transaction
SQLError.48=Communication link failure
SQLError.49=Insert value list does not match column list
SQLError.50=Numeric value out of range
SQLError.51=Datetime field overflow
SQLError.52=Division by zero
SQLError.53=Deadlock found when trying to get lock; Try restarting transaction
SQLError.54=Invalid authorization specification
SQLError.55=Syntax error or access violation
SQLError.56=Base table or view not found
SQLError.57=Base table or view already exists
SQLError.58=Base table not found
SQLError.59=Index already exists
SQLError.60=Index not found
SQLError.61=Column already exists
SQLError.62=Column not found
SQLError.63=No default for column
SQLError.64=General error
SQLError.65=Memory allocation failure
SQLError.66=Invalid column number
SQLError.67=Invalid argument value
SQLError.68=Driver not capable
SQLError.69=Timeout expired

#
# ConnectionProperty Categories
#

ConnectionProperties.categoryAuthentication=Authentication
ConnectionProperties.categoryConnection=Connection
ConnectionProperties.categorySession=Session
ConnectionProperties.categoryNetworking=Networking
ConnectionProperties.categorySecurity=Security
ConnectionProperties.categoryStatements=Statements
ConnectionProperties.categoryPreparedStatements=Prepared Statements
ConnectionProperties.categoryResultSets=Result Sets
ConnectionProperties.categoryMetadata=Metadata
ConnectionProperties.categoryBlobs=BLOB/CLOB processing
ConnectionProperties.categoryDatetimes=Datetime types processing
ConnectionProperties.categoryHA=High Availability and Clustering
ConnectionProperties.categoryPerformance=Performance Extensions
ConnectionProperties.categoryDebuggingProfiling=Debugging/Profiling
ConnectionProperties.categoryExceptions=Exceptions/Warnings
ConnectionProperties.categoryIntegration=Tunes for integration with other products
ConnectionProperties.categoryJDBC=JDBC compliance
ConnectionProperties.categoryXDevAPI=X Protocol and X DevAPI
ConnectionProperties.categoryUserDefined=User-defined properties

#
# ConnectionProperty Descriptions
#

ConnectionProperties.allowMultiQueries=Allow the use of ";" to delimit multiple queries during one statement. This option does not affect the ''addBatch()'' and ''executeBatch()'' methods, which rely on ''rewriteBatchStatements'' instead.
ConnectionProperties.allowNANandINF=Should the driver allow NaN or +/- INF values in ''PreparedStatement.setDouble()''?
ConnectionProperties.allowPublicKeyRetrieval=Allows special handshake round-trip to get an RSA public key directly from server.
ConnectionProperties.blobsAreStrings=Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses?
ConnectionProperties.cachePrepStmts=Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the "check" for suitability of server-side prepared and server-side prepared statements themselves?
ConnectionProperties.characterEncoding=Instructs the server to set session system variables ''character_set_client'' and ''character_set_connection'' to the default character set supported by MySQL for the specified Java character encoding and set ''collation_connection'' to the default collation for this character set. If neither this property nor the property ''connectionCollation'' is set:[CR]For Connector/J 8.0.25 and earlier, the driver will try to use the server''s default character set;[CR]For Connector/J 8.0.26 and later, the driver will use "utf8mb4".
ConnectionProperties.clientCertificateKeyStorePassword=Password for the client certificates key store.
ConnectionProperties.clientCertificateKeyStoreType=Key store type for client certificates.[CR]Null or empty means use the default, which is "JKS". Standard key store types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security providers are installed and available to the JVM.
ConnectionProperties.clientCertificateKeyStoreUrl=URL for the client certificate KeyStore.[CR]If not specified, the property ''fallbackToSystemKeyStore'' determines if system-wide key store is used.
ConnectionProperties.clobCharacterEncoding=The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection ''characterEncoding''.
ConnectionProperties.compensateOnDuplicateKeyUpdateCounts=Should the driver compensate for the update counts of "INSERT ... ON DUPLICATE KEY UPDATE" statements (2 = 1, 0 = 1) when using prepared statements?
ConnectionProperties.connectionAttributes=A comma-delimited list of user-defined "key:value" pairs, in addition to standard MySQL-defined "key:value" pairs, to be passed to MySQL Server for display as connection attributes in the ''PERFORMANCE_SCHEMA'' tables ''session_account_connect_attrs'' and ''session_connect_attrs''. Example usage: "connectionAttributes=key1:value1,key2:value2" This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting "connectionAttributes=none" will cause connection attribute processing to be bypassed for situations where Connection creation/initialization speed is critical.
ConnectionProperties.connectionCollation=Instructs the server to set session system variable ''collation_connection'' to the specified collation name and set ''character_set_client'' and ''character_set_connection'' to a corresponding character set. This property overrides the value of ''characterEncoding'' with the default character set this collation belongs to, if and only if ''characterEncoding'' is not configured or is configured with a character set that is incompatible with the collation. That means ''connectionCollation'' may not always correct a mismatch of character sets. For example, if ''connectionCollation'' is set to "latin1_swedish_ci", the corresponding character set is "latin1" for MySQL, which maps it to the Java character set "windows-1252"; so if ''characterEncoding'' is not set,"windows-1252" is the character set that will be used; but if ''characterEncoding'' has been set to, e.g. "ISO-8859-1", that is compatible with "latin1_swedish_ci", so the character encoding  setting is left unchanged; and if client is actually using "windows-1252" (which is similar but different from "ISO-8859-1"), errors would occur for some characters. If neither this property nor the property ''characterEncoding'' is set:[CR]For Connector/J 8.0.25 and earlier, the driver will try to use the server''s default character set;[CR]For Connector/J 8.0.26 and later, the driver will use utf8mb4''s default collation.
ConnectionProperties.connectionTimeZone=Configures the connection time zone which is used by Connector/J if conversion between the JVM default and a target time zone is needed when preserving instant temporal values.[CR]Accepts a geographic time zone name or a time zone offset from Greenwich/UTC, using a syntax ''java.time.ZoneId'' is able to parse, or one of the two logical values "LOCAL" and "SERVER". Default is "LOCAL". If set to an explicit time zone then it must be one that either the JVM or both the JVM and MySQL support. If set to "LOCAL" then the driver assumes that the connection time zone is the same as the JVM default time zone. If set to "SERVER" then the driver attempts to detect the session time zone from the values configured on the MySQL server session variables ''time_zone'' or ''system_time_zone''. The time zone detection and subsequent mapping to a Java time zone may fail due to several reasons, mostly because of time zone abbreviations being used, in which case an explicit time zone must be set or a different time zone must be configured on the server.[CR]This option itself does not set MySQL server session variable ''time_zone'' to the given value. To do that the ''forceConnectionTimeZoneToSession'' connection option must be set to "true".[CR]Please note that setting a value to ''connectionTimeZone'' in conjunction with "forceConnectionTimeZoneToSession=false" and "preserveInstants=false" has no effect since, in this case, neither this option is used to change the session time zone nor used for time zone conversions of time-based data.[CR]Former connection option ''serverTimezone'' is still valid as an alias of this one but may be deprecated in the future.[CR]See also ''forceConnectionTimeZoneToSession'' and ''preserveInstants'' for more details.
ConnectionProperties.connectTimeout=Timeout for socket connect (in milliseconds), with 0 being no timeout.
ConnectionProperties.continueBatchOnError=Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way.
ConnectionProperties.disconnectOnExpiredPasswords=If ''disconnectOnExpiredPasswords'' is set to "false" and password is expired then server enters sandbox mode and sends ''ERR(08001, ER_MUST_CHANGE_PASSWORD)'' for all commands that are not needed to set a new password until a new password is set.
ConnectionProperties.dontCheckOnDuplicateKeyUpdateInSQL=Stops checking if every INSERT statement contains the "ON DUPLICATE KEY UPDATE" clause. As a side effect, obtaining the statement''s generated keys information will return a list where normally it would not. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with "rewriteBatchedStatements=true".
ConnectionProperties.emptyStringsConvertToZero=Should the driver allow conversions from empty string fields to numeric values of "0"?
ConnectionProperties.enableEscapeProcessing=Sets the default escape processing behavior for Statement objects. The method ''Statement.setEscapeProcessing()'' can be used to specify the escape processing behavior for an individual statement object. Default escape processing behavior in prepared statements must be defined with the property ''processEscapeCodesForPrepStmts''.
ConnectionProperties.enableQueryTimeouts=When enabled, query timeouts set via ''Statement.setQueryTimeout()'' use a shared ''java.util.Timer'' instance for scheduling. Even if the timeout doesn''t expire before the query is processed, there will be memory used by the ''TimerTask'' for the given timeout which won''t be reclaimed until the time the timeout would have expired if it hadn''t been cancelled by the driver. High-load environments might want to consider disabling this functionality.
ConnectionProperties.fallbackToSystemKeyStore=Whether the absence of setting a value for ''clientCertificateKeyStoreUrl'' falls back to using the system-wide key store defined through the system properties ''javax.net.ssl.keyStore*''.
ConnectionProperties.fallbackToSystemTrustStore=Whether the absence of setting a value for ''trustCertificateKeyStoreUrl'' falls back to using the system-wide default trust store or one defined through the system properties ''javax.net.ssl.trustStore*''.
ConnectionProperties.fipsCompliantJsse=Enables Connector/J to be compatible to JSSE operating in FIPS mode. Should be set to "true" if the JSSE is configured to operate in FIPS mode and Connector/J receives the error "FIPS mode: only SunJSSE TrustManagers may be used" when creating secure connections. If set to "true" then, when establishing secure connections, the driver operates as if the ''sslMode'' was set to "VERIFY_CA" or "VERIFY_IDENTITY", i.e., all secure connections require at least server certificate validation, for which a trust store must be configured or fall back to the system-wide trust store must be enabled.
ConnectionProperties.functionsNeverReturnBlobs=Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for "GROUP BY" clauses?
ConnectionProperties.generateSimpleParameterMetadata=Should the driver generate simplified parameter metadata for prepared statements when no metadata is available either because the server couldn''t support preparing the statement, or server-side prepared statements are disabled?
ConnectionProperties.keyManagerFactoryProvider=The name of the a Java Security Provider that provides a ''javax.net.ssl.KeyManagerFactory'' implementation. If none is specified then the default one is used.
ConnectionProperties.keyStoreProvider=The name of the a Java Security Provider that provides a ''java.security.KeyStore'' implementation that supports the key stores types specified with ''clientCertificateKeyStoreType'' and ''trustCertificateKeyStoreType''. If none is specified then the default one is used.
ConnectionProperties.largeRowSizeThreshold=What size result set row should the JDBC driver consider large, and thus use a more memory-efficient way of representing the row internally?
ConnectionProperties.localSocketAddress=Hostname or IP address given to explicitly configure the interface that the driver will bind the client side of the TCP/IP connection to when connecting.
ConnectionProperties.maxAllowedPacket=Maximum allowed packet size to send to server. If not set, the value of system variable ''max_allowed_packet'' will be used to initialize this upon connecting. This value will not take effect if set larger than the value of ''max_allowed_packet''. Also, due to an internal dependency with the property ''blobSendChunkSize'', this setting has a minimum value of "8203" if ''useServerPrepStmts'' is set to "true".
ConnectionProperties.queryInfoCacheFactory=Name of a class implementing ''com.mysql.cj.CacheAdapterFactory'' which will be used to create caches for the parsed representation of prepared statements. Prior to version 8.0.29, this property was named ''parseInfoCacheFactory'', which remains as an alias.
ConnectionProperties.Password=The password to use when authenticating the user.
ConnectionProperties.Password1=The password to use in the first phase of a Multi-Factor Authentication workflow. It is a synonym of the connection property ''password'' and can also be set with user credentials in the connection string.
ConnectionProperties.Password2=The password to use in the second phase of a Multi-Factor Authentication workflow.
ConnectionProperties.Password3=The password to use in the third phase of a Multi-Factor Authentication workflow.
ConnectionProperties.prepStmtCacheSize=If prepared statement caching is enabled, how many prepared statements should be cached?
ConnectionProperties.prepStmtCacheSqlLimit=If prepared statement caching is enabled, what''s the largest SQL the driver will cache the parsing for?
ConnectionProperties.rewriteBatchedStatements=Should the driver use multi-queries, regardless of the setting of ''allowMultiQueries'', as well as rewriting of prepared statements for INSERT and REPLACE queries into multi-values clause statements when ''executeBatch()'' is called?[CR]Notice that this might allow SQL injection when using plain statements and the provided input is not properly sanitized. Also notice that for prepared statements, if the stream length is not specified when using ''PreparedStatement.set*Stream()'', the driver would not be able to determine the optimum number of parameters per batch and might return an error saying that the resultant packet is too large.[CR]''Statement.getGeneratedKeys()'', for statements that are rewritten only works when the entire batch consists of INSERT or REPLACE statements.[CR]Be aware that when using "rewriteBatchedStatements=true" with "INSERT ... ON DUPLICATE KEY UPDATE" for rewritten statements, the server returns only one value for all affected (or found) rows in the batch, and it is not possible to map it correctly to the initial statements; in this case the driver returns "0" as the result for each batch statement if total count was zero, and ''Statement.SUCCESS_NO_INFO'' if total count was above zero.
ConnectionProperties.serverRSAPublicKeyFile=File path to the server RSA public key file for ''sha256_password'' authentication. If not specified, the public key will be retrieved from the server.
ConnectionProperties.sessionVariables=A comma or semicolon separated list of "name=value" pairs to be sent as "SET [SESSION] ..." to the server when the driver connects.
ConnectionProperties.socketTimeout=Timeout, specified in milliseconds, on network socket operations. Value "0" means no timeout.
ConnectionProperties.sslContextProvider=The name of the a Java Security Provider that provides a ''javax.net.ssl.SSLContext'' implementation. If none is specified then the default one is used.
ConnectionProperties.sslMode=By default, network connections are SSL encrypted; this property permits secure connections to be turned off, or a different levels of security to be chosen. The following values are allowed: "DISABLED" - Establish unencrypted connections; "PREFERRED" - Establish encrypted connections if the server enabled them, otherwise fall back to unencrypted connections; "REQUIRED" - Establish secure connections if the server enabled them, fail otherwise; "VERIFY_CA" - Like "REQUIRED" but additionally verify the server TLS certificate against the configured Certificate Authority (CA) certificates; "VERIFY_IDENTITY" - Like "VERIFY_CA", but additionally verify that the server certificate matches the host to which the connection is attempted.[CR] This property replaced the deprecated legacy properties ''useSSL'', ''requireSSL'', and ''verifyServerCertificate'', which are still accepted but translated into a value for ''sslMode'' if ''sslMode'' is not explicitly set: "useSSL=false" is translated to "sslMode=DISABLED"; '{'"useSSL=true", "requireSSL=false", "verifyServerCertificate=false"'}' is translated to "sslMode=PREFERRED"; '{'"useSSL=true", "requireSSL=true", "verifyServerCertificate=false"'}' is translated to "sslMode=REQUIRED"; '{'"useSSL=true", "verifyServerCertificate=true"'}' is translated to "sslMode=VERIFY_CA". There is no equivalent legacy settings for "sslMode=VERIFY_IDENTITY". Note that, for all server versions, the default setting of ''sslMode'' is "PREFERRED", and it is equivalent to the legacy settings of "useSSL=true", "requireSSL=false", and "verifyServerCertificate=false", which are different from their default settings for Connector/J 8.0.12 and earlier in some situations. Applications that continue to use the legacy properties and rely on their old default settings should be reviewed.[CR]The legacy properties are ignored if ''sslMode'' is set explicitly. If none of ''sslMode'' or ''useSSL'' is set explicitly, the default setting of "sslMode=PREFERRED" applies.
ConnectionProperties.tcpKeepAlive=If connecting using TCP/IP, should the driver set ''SO_KEEPALIVE''?
ConnectionProperties.tcpNoDelay=If connecting using TCP/IP, should the driver set ''SO_TCP_NODELAY'', disabling the Nagle Algorithm?
ConnectionProperties.tcpSoRcvBuf=If connecting using TCP/IP, should the driver set ''SO_RCV_BUF'' to the given value? The default value of "0", means use the platform default value for this property.
ConnectionProperties.tcpSoSndBuf=If connecting using TCP/IP, should the driver set ''SO_SND_BUF'' to the given value? The default value of "0", means use the platform default value for this property.
ConnectionProperties.tcpTrafficClass=If connecting using TCP/IP, should the driver set traffic class or type-of-service fields? See the documentation for ''java.net.Socket.setTrafficClass()'' for more information.
ConnectionProperties.tinyInt1isBit=Since the MySQL server silently converts BIT to TINYINT(1) when creating tables, should the driver treat the datatype TINYINT(1) as the BIT type?
ConnectionProperties.tlsCiphersuites=When establishing secure connections, overrides the cipher suites enabled for use on the underlying SSL sockets. This may be required when using external JSSE providers or to specify cipher suites compatible with both MySQL server and used JVM. Prior to version 8.0.28, this property was named ''enabledSSLCipherSuites'', which remains as an alias.
ConnectionProperties.tlsVersions=List of TLS protocols to allow when establishing secure connections. Overrides the TLS protocols enabled in the underlying SSL sockets. This can be used to restrict connections to specific TLS versions and, by doing that, avoid TLS negotiation fallback. Allowed and default values are "TLSv1.2" and "TLSv1.3". Prior to version 8.0.28, this property was named ''enabledTLSProtocols'', which remains as an alias.
ConnectionProperties.transformedBitIsBoolean=If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT?
ConnectionProperties.treatMysqlDatetimeAsTimestamp=Should the driver treat the MySQL DATETIME type as TIMESTAMP in ''ResultSet.getObject()''? Enabling this option changes the default MySQL data type to Java type mapping for DATETIME from ''java.time.LocalDateTime'' to ''java.sql.Timestamp''. Given the nature of the DATETIME type and its inability to represent instant values, it is not advisable to enable this option unless the driver is used with a framework or API that expects exclusively objects following the default MySQL data types to Java types mapping, which is the case of, for example, ''javax.sql.rowset.CachedRowSet''.
ConnectionProperties.trustCertificateKeyStorePassword=Password for the trusted root certificates key store.
ConnectionProperties.trustCertificateKeyStoreType=Key store type for trusted root certificates.[CR]Null or empty means use the default, which is "JKS". Standard key store types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security providers are installed and available to the JVM.
ConnectionProperties.trustCertificateKeyStoreUrl=URL for the trusted root certificates key store.[CR]If not specified, the property ''fallbackToSystemTrustStore'' determines if system-wide trust store is used.
ConnectionProperties.trustManagerFactoryProvider=The name of the a Java Security Provider that provides a ''javax.net.ssl.TrustManagerFactory'' implementation. If none is specified then the default one is used.
ConnectionProperties.useAffectedRows=Don''t set the ''CLIENT_FOUND_ROWS'' flag when connecting to the server. Note that this is not JDBC-compliant and it will break most applications that rely on "found" rows vs. "affected rows" for DML statements, but does cause correct update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server.
ConnectionProperties.useReadAheadInput=Use optimized non-blocking buffered input stream when reading from the server?
ConnectionProperties.Username=The user to connect as. If none is specified, it is authentication plugin dependent what user name is used. Built-in authentication plugins default to the session login user name.
ConnectionProperties.useUnbufferedInput=Don''t use ''BufferedInputStream'' for reading data from the server.
ConnectionProperties.yearIsDateType=Should the JDBC driver treat the MySQL type YEAR as a ''java.sql.Date'', or as a SHORT?

ConnectionProperties.unknown=Property is not defined in Connector/J but used in connection URL.
ConnectionProperties.allVersions=all versions

PropertyDefinition.1=The connection property ''{0}'' acceptable values are: {1}. The value ''{2}'' is not acceptable.
